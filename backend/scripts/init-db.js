require('dotenv').config();
const { Pool } = require('pg');

console.log('Iniciando script de inicialización de la base de datos...');
console.log('DATABASE_URL:', process.env.DATABASE_URL);

const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
  ssl: {
    rejectUnauthorized: false
  },
  connectionTimeoutMillis: 10000 // 10 segundos
});

const initDb = async () => {
  let client;
  try {
    // Verificar la conexión
    console.log('Verificando conexión a la base de datos...');
    const testResult = await pool.query('SELECT NOW()');
    console.log('Conexión exitosa. Hora del servidor:', testResult.rows[0].now);
    
    // Obtener un cliente del pool
    console.log('Obteniendo cliente para inicializar tablas...');
    client = await pool.connect();
    
    // Crear tablas
    console.log('Creando tabla services...');
    await client.query(`
      CREATE TABLE IF NOT EXISTS services (
        id SERIAL PRIMARY KEY,
        name VARCHAR(100) NOT NULL,
        description TEXT,
        icon_name VARCHAR(50),
        created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
      );
    `);
    
    console.log('Creando tabla contact_messages...');
    await client.query(`
      CREATE TABLE IF NOT EXISTS contact_messages (
        id SERIAL PRIMARY KEY,
        name VARCHAR(100) NOT NULL,
        email VARCHAR(100) NOT NULL,
        phone VARCHAR(20),
        message TEXT NOT NULL,
        read BOOLEAN DEFAULT FALSE,
        created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
      );
    `);
    
    console.log('Creando tabla stats...');
    await client.query(`
      CREATE TABLE IF NOT EXISTS stats (
        id SERIAL PRIMARY KEY,
        name VARCHAR(100) NOT NULL,
        value INTEGER NOT NULL,
        icon_name VARCHAR(50),
        updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
      );
    `);
    
    console.log('Creando tabla todos...');
    await client.query(`
      CREATE TABLE IF NOT EXISTS todos (
        id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        owner_id TEXT NOT NULL,
        task TEXT NOT NULL,
        is_complete BOOLEAN NOT NULL DEFAULT FALSE,
        inserted_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
      );
    `);
    
    // Verificar si existen las tablas
    console.log('Verificando tablas creadas...');
    const tablesResult = await client.query(`
      SELECT table_name 
      FROM information_schema.tables 
      WHERE table_schema = 'public'
      ORDER BY table_name;
    `);
    
    console.log('Tablas existentes:');
    tablesResult.rows.forEach(row => {
      console.log(`- ${row.table_name}`);
    });
    
    console.log('Inicialización de la base de datos completada con éxito.');
  } catch (error) {
    console.error('Error al inicializar la base de datos:', error);
  } finally {
    if (client) {
      client.release();
      console.log('Cliente liberado');
    }
    await pool.end();
    console.log('Conexión a la base de datos cerrada');
  }
};

initDb(); 