const { Pool } = require('pg');

// Configuración del pool de conexiones
const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
  ssl: {
    rejectUnauthorized: false // Necesario para conexiones a Neon
  },
  max: 10, // Reducir el número máximo de clientes en el pool
  idleTimeoutMillis: 30000, // Tiempo máximo que un cliente puede estar inactivo
  connectionTimeoutMillis: 5000, // Aumentar el tiempo máximo para establecer una conexión
});

// Evento para cuando se crea un cliente
pool.on('connect', () => {
  console.log('Base de datos conectada');
});

// Evento para errores en el pool
pool.on('error', (err) => {
  console.error('Error inesperado en el cliente PostgreSQL', err);
  // No salir del proceso, solo registrar el error
});

// Función para ejecutar consultas
const query = (text, params) => pool.query(text, params);

// Función para inicializar la base de datos
const initDb = async () => {
  let client;
  try {
    // Verificar la conexión primero
    await pool.query('SELECT NOW()');
    console.log('Conexión a la base de datos establecida');
    
    client = await pool.connect();
    console.log('Cliente conectado para inicializar la base de datos');
    
    // Crear tablas si no existen
    await client.query(`
      CREATE TABLE IF NOT EXISTS services (
        id SERIAL PRIMARY KEY,
        name VARCHAR(100) NOT NULL,
        description TEXT,
        icon_name VARCHAR(50),
        created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
      );
    `);
    console.log('Tabla services verificada');

    await client.query(`
      CREATE TABLE IF NOT EXISTS contact_messages (
        id SERIAL PRIMARY KEY,
        name VARCHAR(100) NOT NULL,
        email VARCHAR(100) NOT NULL,
        phone VARCHAR(20),
        message TEXT NOT NULL,
        read BOOLEAN DEFAULT FALSE,
        created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
      );
    `);
    console.log('Tabla contact_messages verificada');

    await client.query(`
      CREATE TABLE IF NOT EXISTS stats (
        id SERIAL PRIMARY KEY,
        name VARCHAR(100) NOT NULL,
        value INTEGER NOT NULL,
        icon_name VARCHAR(50),
        updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
      );
    `);
    console.log('Tabla stats verificada');

    // Crear tabla de todos según las instrucciones de Stack Auth
    await client.query(`
      CREATE TABLE IF NOT EXISTS todos (
        id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        owner_id TEXT NOT NULL,
        task TEXT NOT NULL,
        is_complete BOOLEAN NOT NULL DEFAULT FALSE,
        inserted_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
      );
    `);
    console.log('Tabla todos verificada');

    console.log('Tablas creadas o verificadas correctamente');
  } catch (error) {
    console.error('Error al inicializar la base de datos:', error);
    throw error;
  } finally {
    if (client) {
      client.release();
      console.log('Cliente liberado');
    }
  }
};

// Función para verificar la conexión a la base de datos
const testConnection = async () => {
  try {
    const result = await pool.query('SELECT NOW()');
    console.log('Conexión exitosa. Hora del servidor:', result.rows[0].now);
    return true;
  } catch (error) {
    console.error('Error al verificar la conexión a la base de datos:', error);
    return false;
  }
};

module.exports = {
  query,
  pool,
  initDb,
  testConnection
}; 